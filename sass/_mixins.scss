/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

// Convert a percentage number to the decimal equivalent
// For example, 50 would correspond to 0.5
@function convert-percentage($number) {
	@return ($number / 100)
}

// Scale a unit number by $scale-vale
// This function first removes the unit, scales it by $scale-value, which is the percentage number without
// the % and then adds the unit back.
@function scale-unit-value($value-to-be-scaled, $scale-value) {
	@return unquote(strip-unit($value-to-be-scaled) * convert-percentage($scale-value) + unit($value-to-be-scaled))
}

// This mixin sets selected tag properties that are changed for different media queries
// This mixin was created as there is a lot of repeated code
@mixin set-selector-props($tag-prop, $base-header-font-size, $header-font-percentage-adjustment,
								$base-header-line-height, $header-line-percentage-adjustment,
								$base-value, $value-precentage-adjustment) {

	@if $tag-prop == "h2" {
		#{$tag-prop} {
				font-size: scale-unit-value($base-header-font-size, $header-font-percentage-adjustment);
				line-height: scale-unit-value($base-header-line-height, $header-line-percentage-adjustment);		
				padding-left: scale-unit-value($base-value, $value-precentage-adjustment);
				padding-right: scale-unit-value($base-value, $value-precentage-adjustment);
		}
	}
	@else if $tag-prop == "p" {
		#{$tag-prop} {
				font-size: scale-unit-value($base-header-font-size, $header-font-percentage-adjustment);
				line-height: scale-unit-value($base-header-line-height, $header-line-percentage-adjustment);		
				margin-left: scale-unit-value($base-value, $value-precentage-adjustment);
				margin-right: scale-unit-value($base-value, $value-precentage-adjustment);
		}		
	}

}

// This mixin sets img properties for different media queries
// As the img tag props were different than the h2 and p tags, I created a separate mixin
@mixin set-selector-img-props($padding-top-var, $padding-left-var, $padding-bottom-var, $margin-right-var) {
	img {
			padding-top: $padding-top-var;
			padding-left: $padding-left-var;
			padding-bottom: $padding-bottom-var;
			margin-right: $margin-right-var;
			float: left;
		}
}

// This mixin sets the header background image, height, and width
// The $header-img-file is input as a string so we need to remove the quotes using the built-in Sass function
// unquote() in order for it to work with the url() function.
@mixin set-header-img-height-width($header-img-file, $header-height, $header-width){
		background: url(unquote($header-img-file)) no-repeat;
		width: $header-width;
		height: $header-height;
}

// This mixin sets the font size and line height.
// Since it is used for multiple media queries in formstyle.scss, decided to make a mixin and reduce code
//
// As the line-height is not always set in these media queries, put some conditional code in to alter css
// based on whether or not the user wants to set the variables...
//
// The user can choose not to set a parameter by setting the input parameter to "none"
@mixin set-font-size-and-line-height($font-size, $line-height) {
	@if $font-size == "none" {
		line-height: $line-height;
	}
	@else if $line-height == "none" {
		font-size: $font-size;
	}
	@else {
		font-size: $font-size;
		line-height: $line-height;
	}
}

// Create Grid System Mixin
// @param {$num-columns} - The number of equally spaced columns
// Mixin uses a for loop to set the width (in percentage)
@mixin create-grid-system($num-columns) {
	@for $i from 1 through $num-columns {
		.col-#{$i} {
			width: percentage(($i / $num-columns));
		}
	}
}

// This mixin sets the font size and centers h3
// This mixin also scales the images within col-1-2-4 when the mouse hovers
// over the image. Using the compass mixin, scale(), to do the scaling
@mixin set-col-1-2-4-props($h3-font-size, $img-scale-x, $image-scale-y){

	// Nesting the col-1-2-4 class
	.col-1-2-4 {
		h3 {
			font-size: $h3-font-size;
			margin: 0 auto;
			text-align: center;
		}

		img:hover {
			// Compass mixin that scales the images in the photogallery when hovering over the image
			@include scale($img-scale-x,$image-scale-y);
		}
	}
}

// This mixin sets transitions of various parameters for a few different browser types
@mixin transition($transition-variable, $transition-time, $transition-timing-function) {
	-webkit-transition:$transition-variable $transition-time $transition-timing-function;
	-moz-transition:$transition-variable $transition-time $transition-timing-function;
	transition:$transition-variable $transition-time $transition-timing-function;          
}

// This simple mixin sets the placeholder input text color for the various browser types
@mixin placeholder_set($text-color) {
	::-webkit-input-placeholder {
		color: $text-color;
	}
	:-moz-placeholder {
		color: $text-color;
	}
	::-moz-placeholder {
		color: $text-color;
	}
	:-ms-input-placeholder {
		color: $text-color;
	}
}

// This mixin sets a few parameters for the aside tag
@mixin thingstodo_aside($h3-font-size, $li-font-size, $li-line-height) {
	aside {
		h3 {
			font-size: $h3-font-size;
		}
		li {
			font-size: $li-font-size;
			line-height: $li-line-height;
		}
	}
}